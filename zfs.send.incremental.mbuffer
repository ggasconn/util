#!/bin/bash

################################################################################
#zfs.send.incremental.mbuffer
################################################################################
# sends a zfs filesystem incrementally to a remote destination via ssh pipeline
# sends the last snapshot of the selected dataset to other machine/dataset,
# detecting the last, common dataset previously synchronized, in order to
# optimize incremental transmission

# note: a previous full send must exist!
# note: this operation is always RECURSIVE (-R)
# Parameters:
#   -source filesystem (snapshots not allowed)
#   -ssh private key
#   -destination host
#   -destination dataset ("zfs receive" -F option will be used)
################################################################################

if [ $# -ne 4 ]
then
  printf "\n\nUsage:\n\t$0 src-dataset ssh-priv-key dest-host dest-dataset\n\n\n"
  exit 1
fi

PREFIX=$(basename $0)
LOCALFILE=/tmp/$PREFIX.$(date +"%Y-%m-%d_%H-%M-%S").$RANDOM
REMOTEFILE=/tmp/$PREFIX.$(date +"%Y-%m-%d_%H-%M-%S").$RANDOM

sudo zfs list -t snapshot -d 1 "${1}" -H -o name -s creation | cut -f 2 -d'@' > $LOCALFILE
R1=$?
ssh -i $2 $3 "zfs list -t snapshot -d 1 ${4} -H -o name -s creation | cut -f 2 -d'@' " > $REMOTEFILE
R2=$?

#echo LOCALFILE=$LOCALFILE
#echo REMOTEFILE=$REMOTEFILE

if [ $R1 -ne 0 ]
then 
  printf "could't read the local snapshot list for ${1}\n"
  exit 1
fi
if [ $R2 -ne 0 ]
then 
  printf "could't read the remote snapshot list for ${1}\n"
  exit 1
fi

#don't use comm, requires sorted files. fgrep -xf instead
#LASTCOMMON=${1}@$(comm -1 -2 $LOCALFILE $REMOTEFILE |  awk -F'[ -]' '{print $4$5$6$7,$0}' | sort | tail -1 | cut -f2 -d' ')
LASTCOMMON=${1}@$(fgrep -xf $LOCALFILE $REMOTEFILE | tail -1)
LASTLOCAL=$(sudo zfs list -t snapshot -d 1 "${1}" -H -o name -s creation | tail -1 )

rm -f $LOCALFILE $REMOTEFILE

LASTCOMMONNAME="${LASTCOMMON##*@}"
#echo LASTCOMMONNAME=$LASTCOMMONNAME

if [ -z "$LASTCOMMONNAME" ]
then
  printf "couldn't find a common snapshot\n"
  exit 1
fi

echo Last common snapshot: $LASTCOMMON
echo Last local snapshot: $LASTLOCAL

if [ "$LASTLOCAL" == "$LASTCOMMON" ]
then
  echo Nothing to do!!!
  exit 1
fi

#install required packages
for P in pv mbuffer
do
  printf "testing command: "
  which $P 2> /dev/null
  if [ $? -ne 0 ]
  then
    printf "Installing $P...\n"
    sudo apt install --yes $P
  fi
done

echo executing remote receive mbuffer...

BLKSIZE=128k
BUFSIZE=1G
PORT=$(/util/random.free.tcp.port)

echo ssh -i "${2}" "${3}" "mbuffer -q -s $BLKSIZE -m $BUFSIZE -I ${PORT} \| zfs receive -F ${4}"  &
     ssh -i "${2}" "${3}" "mbuffer -q -s $BLKSIZE -m $BUFSIZE -I ${PORT} | zfs receive -F ${4}"  &

sleep 2

#test remote port ready (netcat problem. it fully opens TCP connection, causing remote mbuffer to finish prematurely
#nc -z -v -w5 ${3} ${5}

if [ $? -eq 0 ]
then
  #send via mbuffer
  echo executing local send mbuffer...
  echo zfs send -R -i "${LASTCOMMON}" "${LASTLOCAL}" \| pv \| mbuffer -q -s $BLKSIZE -m $BUFSIZE -O ${3}:${PORT}
       zfs send -R -i "${LASTCOMMON}" "${LASTLOCAL}"  | pv  | mbuffer -q -s $BLKSIZE -m $BUFSIZE -O ${3}:${PORT}
else
  echo Error: ${3}:${5} not ready!
  exit 1
fi

